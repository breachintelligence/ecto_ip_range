defmodule EctoIPRange.Util.CIDRTest do
  use ExUnit.Case, async: true

  doctest EctoIPRange.Util.CIDR, import: true

  alias EctoIPRange.Util.CIDR

  test "parse_ipv4" do
    assert CIDR.parse_ipv4("0.0.0.0", 32) == {{0, 0, 0, 0}, {0, 0, 0, 0}}
    assert CIDR.parse_ipv4("0.0.0.0", 28) == {{0, 0, 0, 0}, {0, 0, 0, 15}}
    assert CIDR.parse_ipv4("0.0.0.0", 24) == {{0, 0, 0, 0}, {0, 0, 0, 255}}
    assert CIDR.parse_ipv4("0.0.0.0", 20) == {{0, 0, 0, 0}, {0, 0, 15, 255}}
    assert CIDR.parse_ipv4("0.0.0.0", 16) == {{0, 0, 0, 0}, {0, 0, 255, 255}}
    assert CIDR.parse_ipv4("0.0.0.0", 12) == {{0, 0, 0, 0}, {0, 15, 255, 255}}
    assert CIDR.parse_ipv4("0.0.0.0", 8) == {{0, 0, 0, 0}, {0, 255, 255, 255}}
    assert CIDR.parse_ipv4("0.0.0.0", 4) == {{0, 0, 0, 0}, {15, 255, 255, 255}}
    assert CIDR.parse_ipv4("0.0.0.0", 0) == {{0, 0, 0, 0}, {255, 255, 255, 255}}
  end

  test "parse_ipv6" do
    assert CIDR.parse_ipv6("::", 128) == {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}}
    assert CIDR.parse_ipv6("::", 120) == {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 255}}
    assert CIDR.parse_ipv6("::", 112) == {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 65_535}}

    assert CIDR.parse_ipv6("::", 104) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 255, 65_535}}

    assert CIDR.parse_ipv6("::", 96) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 88) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 255, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 80) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 72) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 255, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 64) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 56) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 255, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 48) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 65_535, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 40) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 255, 65_535, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 32) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 24) ==
             {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 255, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 16) ==
             {{0, 0, 0, 0, 0, 0, 0, 0},
              {0, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 8) ==
             {{0, 0, 0, 0, 0, 0, 0, 0},
              {255, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}}

    assert CIDR.parse_ipv6("::", 0) ==
             {{0, 0, 0, 0, 0, 0, 0, 0},
              {65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}}
  end
end
