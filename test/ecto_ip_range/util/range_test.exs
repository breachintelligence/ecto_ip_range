defmodule EctoIPRange.Util.RangeTest do
  use ExUnit.Case, async: true

  doctest EctoIPRange.Util.Range, import: true

  alias EctoIPRange.Util.Range

  test "parse_ipv4" do
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 0, 0, 0}) == "0.0.0.0/32"
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 0, 0, 15}) == "0.0.0.0/28"
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 0, 0, 255}) == "0.0.0.0/24"
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 0, 15, 255}) == "0.0.0.0/20"
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 0, 255, 255}) == "0.0.0.0/16"
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 15, 255, 255}) == "0.0.0.0/12"
    assert Range.parse_ipv4({0, 0, 0, 0}, {0, 255, 255, 255}) == "0.0.0.0/8"
    assert Range.parse_ipv4({0, 0, 0, 0}, {15, 255, 255, 255}) == "0.0.0.0/4"
    assert Range.parse_ipv4({0, 0, 0, 0}, {255, 255, 255, 255}) == "0.0.0.0/0"
  end

  test "parse_ipv6" do
    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}) ==
             "::/128"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 255}) ==
             "::/120"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 65_535}) ==
             "::/112"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 255, 65_535}) ==
             "::/104"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 65_535, 65_535}) ==
             "::/96"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 255, 65_535, 65_535}) ==
             "::/88"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 65_535, 65_535, 65_535}) ==
             "::/80"

    assert Range.parse_ipv6({0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 255, 65_535, 65_535, 65_535}) ==
             "::/72"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 0, 0, 0, 65_535, 65_535, 65_535, 65_535}
           ) == "::/64"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 0, 0, 255, 65_535, 65_535, 65_535, 65_535}
           ) == "::/56"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 0, 0, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/48"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 0, 255, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/40"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 0, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/32"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 255, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/24"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {0, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/16"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {255, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/8"

    assert Range.parse_ipv6(
             {0, 0, 0, 0, 0, 0, 0, 0},
             {65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535, 65_535}
           ) == "::/0"
  end
end
